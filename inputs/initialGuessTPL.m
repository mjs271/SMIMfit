%===============================================================================
%===============================================================================
%
% This function provides the initial guesses to be used by the optimization
% function in SMIMfit().
%
% NOTE: If the user wishes to employ different guesses, they may be altered here,
%       or by providing them in the input struct to SMIMfit().
%
%===============================================================================
%
% Inputs:
%   mymeas   := measurement (conservative or reactive)
%   varargin := optional inputs depending on the 'mymeas' case
%       - mymeas = 'c':
%           1) length  := length of domain
%           2) CmaxTime := the time of peak concentration
%       - mymeas = 'r':
%           1) consM := data struct generated by the conservative fit,
%                       containing the transport parameters
%
% Outputs:
%   params_guess := initial guess for parameters to be fitted by the optimization function
%   params_upper := upper bound for the parameters to be fitted
%   params_lower := lower bound for the parameters to be fitted
%
%===============================================================================
%===============================================================================

function [params_guess, params_upper, params_lower] =...
                                               initialGuessTPL(mymeas, varargin)

p = inputParser;

% error checking function
checkMeas = @(x) any(validatestring(x, {'c', 'r'}));

% measurement, must be 'c' (conservative) or 'r' (reactive)
addRequired(p, 'mymeas', checkMeas);

% Optional input parameters; variables are set to defaults unless called as
% a 'name',value argument pair in the function input
addParameter(p, 'length', 50, @(x) (x > 0) && isnumeric(x) && isscalar(x)); % Length of the reach where measures are being made (default 50 m).
addParameter(p, 'CmaxTime', inf, @(x) (x > 0) && isnumeric(x) && isscalar(x));
addParameter(p, 'consM', struct, @(x) isstruct(x));

parse(p, mymeas, varargin{:});

length  = p.Results.length;
CmaxTime = p.Results.CmaxTime;
consM   = p.Results.consM;

if strcmp(mymeas, 'c')
    v      = length / CmaxTime;
    D      = 0.02;
    Lambda = 2e-2;
    Beta   = 0.78;
    T1     = 0;
    T2     = 4.2;

    params_guess = [v D Lambda Beta T1 T2];
    params_upper = [0.15 min(0.08, 0.25) 0.085 1.2 T1 log10(14e3)]; % previous T2 upper limit was 4.7, Beta 1.2
    params_lower = [0.1 * params_guess(1) 2E-4 0.0001 0.4 T1 log10(4e3)]; % previous T2 lower limit was 3.4, Beta .4
elseif strcmp(mymeas, 'r')
    params_guess = [consM.params_fit 0.01 1e-6];
    params_upper = [consM.params_fit 0.04 0.01];
    params_lower = [consM.params_fit 1e-8 1e-8];
end

end
